# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re

#launches a web page in a browser and performs basic operations like send text, click on an element etc.
class Guitest(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = "https://www.qantas.com/au/en.htm"
        self.verificationErrors = []
        self.accept_next_alert = True
    
    def test_gui(self):
        driver = self.driver
        driver.get(self.base_url + "about:home")
        driver.find_element_by_id("searchText").clear()
        driver.find_element_by_id("searchText").send_keys("qantas")
        driver.find_element_by_id("searchSubmit").click()
        driver.find_element_by_id("vs0p1c0").click()
        driver.find_element_by_id("panel-book-a-trip").click()
        driver.find_element_by_id("typeahead-input-from").clear()
        driver.find_element_by_id("typeahead-input-from").send_keys("canberra")
        driver.find_element_by_css_selector("#typeahead-list-item-from-0 > div > span").click()
        driver.find_element_by_id("typeahead-input-to").clear()
        driver.find_element_by_id("typeahead-input-to").send_keys("sydney")
        driver.find_element_by_css_selector("#typeahead-list-item-to-0 > div > span").click()
        driver.find_element_by_xpath("(//button[@type='submit'])[4]").click()
        driver.find_element_by_css_selector("button.btn").click()
    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException as e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException as e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
